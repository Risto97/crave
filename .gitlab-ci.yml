before_script:
  - scripts/show_linux_distribution_and_install_packages.sh
  - NUM_JOBS=$[`nproc`-1]
  - if [ "$NUM_JOBS" -lt 1 ]; then NUM_JOBS=1; fi
  - GIT_SSL_NO_VERIFY=true git submodule sync
  - GIT_SSL_NO_VERIFY=true git submodule update --init

.ubuntu: &ubuntu
  image: ubuntu:xenial
  tags:
  - docker
  
.centOS: &centOS
  image: centos:centos7
  tags:
  - docker
  
.build_default: 
  script: &build_default
  - make -j $NUM_JOBS
  - make test

build_default_ubuntu:
  <<: *ubuntu
  script: *build_default
  
build_default_centOS:
  <<: *centOS
  script: *build_default

.fast_build:
  script: &fast_build
  - ./bootstrap.sh -d deps -b cudd -b sword build -DCRAVE_TIMEOUT=60 -DCRAVE_BUILD_EXAMPLES=off
  - cd build
  - make -j $NUM_JOBS
  - ctest --schedule-random
  
fast_build_ubuntu:
  <<: *ubuntu
  script: *fast_build
  
fast_build_centOS:
  <<: *centOS
  script: *fast_build

.build_release:
  script: &build_release
  - ./bootstrap.sh -d deps -m RELEASE --systemc -b cudd -b sword build -DCRAVE_TIMEOUT=60 -DCRAVE_EXAMPLES_TIMEOUT=180
  - make -j $NUM_JOBS
  - make test
  
build_release_ubuntu:
  <<: *ubuntu
  script: *build_release
  
build_release_centOS:
  <<: *centOS
  script: *build_release
  
.build_install: 
  script: &build_install
  - ./bootstrap.sh -d deps --systemc -b cudd -b sword build -DCRAVE_BUILD_EXAMPLES=off -DCRAVE_ENABLE_TESTS=off
  - cd build
  - make -j $NUM_JOBS install
  - CRAVE_INSTALL_DIR=`pwd`/root/share/crave
  - git clone --depth 1 https://github.com/hoangmle/test-crave-install.git
  - cd test-crave-install
  - cmake . -Dcrave_DIR=$CRAVE_INSTALL_DIR
  - make -j $NUM_JOBS
  - ./main 2>result || true
  - cat result
  - TMP=`grep 'German' result`
  - if [ "$TMP" == "" ]; then exit 1; fi
  
build_install_ubuntu:
  <<: *ubuntu
  script: *build_install
  
build_install_centOS:
  <<: *centOS
  script: *build_install

### optional builds in the following

build_default_stp:
  <<: *ubuntu
  script:
  - CRAVE_SOLVERS='cudd stp' make -j $NUM_JOBS
  - make test
  allow_failure: true

build_boolector:
  <<: *ubuntu
  script:
  - ./bootstrap.sh -d deps --systemc -b boolector -b cudd build -DCRAVE_TIMEOUT=60 -DCRAVE_EXAMPLES_TIMEOUT=180
  - cd build
  - make -j $NUM_JOBS
  - ctest --schedule-random
  allow_failure: true

build_cvc4:
  <<: *ubuntu
  script:
  - ./bootstrap.sh -d deps --systemc -b cudd -b cvc4 build -DCRAVE_TIMEOUT=60 -DCRAVE_EXAMPLES_TIMEOUT=180
  - cd build
  - make -j $NUM_JOBS
  - ctest --schedule-random
  allow_failure: true

build_yices2:
  <<: *ubuntu
  script:
  - ./bootstrap.sh -d deps --systemc -b cudd -b yices2 build -DCRAVE_TIMEOUT=60 -DCRAVE_EXAMPLES_TIMEOUT=180
  - cd build
  - make -j $NUM_JOBS
  - ctest --schedule-random
  allow_failure: true

build_z3:
  <<: *ubuntu
  script:
  - ./bootstrap.sh -d deps --systemc -b cudd -b z3 build -DCRAVE_TIMEOUT=60 -DCRAVE_EXAMPLES_TIMEOUT=180
  - cd build
  - make -j $NUM_JOBS
  - ctest --schedule-random
  allow_failure: true
